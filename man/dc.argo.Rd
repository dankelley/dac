% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/argo.R
\name{dc.argo}
\alias{dc.argo}
\alias{dc.argoID}
\alias{dc.argoSearch}
\title{Download and Cache an Argo Dataset}
\usage{
dc.argo(id, longitude, latitude, time, server = "www.usgodae.org",
  destdir = ".", destfile, force = FALSE, dryrun = FALSE,
  debug = getOption("dcDebug", 0))

dc.argoID(id = NULL, server = "www.usgodae.org", destdir = ".", destfile,
  force = FALSE, dryrun = FALSE, debug = getOption("dcDebug", 0))

dc.argoSearch(id = NULL, longitude, latitude, time,
  server = "www.usgodae.org", destdir = ".", destfile, force = FALSE,
  dryrun = FALSE, debug = getOption("dcDebug", 0))
}
\arguments{
\item{id}{A character value indicating the ID of a particular
argo float. If this is provided, then \code{longitude}
\code{latitude} and \code{time} are ignored, and \code{dc.argo}
downloads a file that contains all the profiles for the
named float.}

\item{longitude}{Two-element numerical vector holding the limits
of longitude (degrees East) to search for Argo profiles.}

\item{latitude}{Two-element numerical vector holding the
latitude limits (degrees North).}

\item{time}{Two-element character vector holding the
time limits in YYYY-MM-DD format.}

\item{server}{String indicating the server. The default is
\code{"www.usgodae.org"}, and it is unlikely that other values
will work correctly, unless they are mirrors of this site, using
the same URL structure and file formats.}

\item{destdir}{Optional string indicating the directory in which to store
downloaded files. If not supplied, \code{"."} is used, i.e. the data file
is stored in the present working directory.  It can be
helpful to create a top-level directory called \code{data},
with a subdirectory for each file type used (e.g. \code{~/data/met}
to hold meteorological files).}

\item{destfile}{Optional string indicating the name of the file.
If not supplied, then the file name is constructed from the other
parameters of the function call, so that subsequent calls with
the same parameters will yield the same result; this is useful
for caching.}

\item{force}{A logical value that indicates whether to force the download,
even if the pathname constructed from \code{destdir} and \code{destfile}
already exists.}

\item{dryrun}{A logical value that indicates whether to return the constructed
web query, without attempting to download the file. This can be helpful in
designing responses to changing URLs.}

\item{debug}{an integer specifying whether debugging information is
to be printed during processing. The printing is done by
a call to \code{\link{dcDebug}}.  Setting \code{debug=0}
turns off this form of debugging, while higher values yield
more information. If one \code{dc} function calls another, it
passes the value of \code{debug} but decreased by 1, which means
that the value of \code{debug} controls not just the breadth
of debugging, but also the depth.}
}
\value{
String indicating the full pathname to the downloaded file.
}
\description{


The data are downloaded, and a simple filename convention permits a caching scheme
in which subsequent calls provide access to these downloaded data.
}
\details{
\code{dc.argoId} downloads all data for the float with
a specified identifier, \code{dc.argoSearch} downloads the
most recent profile for all floats in a specified longitude,
latitude, and time box, and \code{dc.argo} is a wrapper that
calls either of the first two functions, depending on
whether the \code{id} argument is provided.

In any case, the downloads are made from the USGODAE server [1]
by default (or from any other server that obeys the same directory
structure). Since the servers do not provide an API for such
downloads, the \code{dc.argo*} functions are forced to work by
constructing URLs that are devised based on inspection of queries
constructed from a GUI-style webpage [2]. This leads to a
brittleness that is discussed in \dQuote{Caution}.
}
\section{Caution}{

The queries used by the \code{dc.argo} functions will fail
if USGODAE changes their system. For an example, USGODAE presently looks
for the substring \code{".submit=++Go++"} in the query, but if this
were to be switched to \code{".submit=Go"}, a seemingly trivial
change, then \code{dc.argo} would fail entirely. For this reason,
the \code{read.argo*} functions may fail at any time. Users who
encounter this problem should contact the author, who may be able
to find a way to reverse-engineer the updated Argo system.
}

\examples{
library(dc)
\dontrun{
library(oce)
## 1. Get float profiles near Nova Scotia on Remembrance Day, 2017,
##    and plot the first one as a CTD.
n <- dc.argo(longitude=c(-65,-55), latitude=c(40,50),
             time=c("2017-11-11","2017-11-11"))
a <- read.argo(n[1])
plotTS(as.ctd(a))

## 2. All profiles for a particular float.
N <- dc.argo(id="4902912")
A <- read.argo(N)
plot(A, type="l") # trajectory
}

}
\references{
1. \url{http://www.usgodae.org}

2. \url{http://www.usgodae.org/cgi-bin/argo_select.pl}
}
\seealso{
The work is done with \code{\link{dc}}.

Other functions that download ocean-related data: \code{\link{dc.amsr}},
  \code{\link{dc.coastline}}, \code{\link{dc.g1sst}},
  \code{\link{dc.hydrography}}, \code{\link{dc.met}},
  \code{\link{dc.topo}}, \code{\link{dc.woa}}
}
\author{
Dan Kelley (2017-11-26)
}
